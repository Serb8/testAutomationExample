// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

using System.Collections.Concurrent;
using TechTalk.SpecFlow;
using Unickq.SpecFlow.Selenium;

#pragma warning disable
namespace Tests.SpecFlow.Features
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SearchExample")]
    public partial class SearchExampleFeature
    {
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
            tagsDict = new ConcurrentDictionary<string, string>();
            helper.SetUp();
        }

        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            helper.TearDown();
            testRunner.OnScenarioEnd();
        }

        private TechTalk.SpecFlow.ITestRunner testRunner;

        private UnickqSpecFlowSeleniumGeneratorHelper helper;

        private ConcurrentDictionary<string, string> tagsDict;

        [NUnit.Framework.OneTimeSetUp()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(
                new System.Globalization.CultureInfo("en-US"), "SearchExample",
                "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                "f two numbers", ProgrammingLanguage.CSharp, ((string[]) (null)));
            testRunner.OnFeatureStart(featureInfo);
            helper = new UnickqSpecFlowSeleniumAllureGeneratorHelper(testRunner);
            helper.FeatureSetup();
        }

        [NUnit.Framework.OneTimeTearDown()]
        public virtual void FeatureTearDown()
        {
            helper.FeatureTearDown();
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.Add("Driver", helper.Driver);
            foreach (var tag in tagsDict) testRunner.ScenarioContext.Add(tag.Key, tag.Value);
        }

        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestCaseAttribute("Debug", "unickq", null, Category = "Debug",
            TestName = "ValidateTitleAfterSearchContainsQuery with Debug and \"unickq\"")]
        [NUnit.Framework.TestCaseAttribute("DebugIpad", "unickq", null, Category = "DebugIpad",
            TestName = "ValidateTitleAfterSearchContainsQuery with DebugIpad and \"unickq\"")]
        [NUnit.Framework.TestCaseAttribute("Debug", "google", null, Category = "Debug",
            TestName = "ValidateTitleAfterSearchContainsQuery with Debug and \"google\"")]
        [NUnit.Framework.TestCaseAttribute("DebugIpad", "google", null, Category = "DebugIpad",
            TestName = "ValidateTitleAfterSearchContainsQuery with DebugIpad and \"google\"")]
        public virtual void ValidateTitleAfterSearchContainsQuery(string browser, string query, string[] exampleTags)
        {
            string[] @__tags = new string[]
            {
                "Browser:Debug",
                "Browser:DebugIpad"
            };
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }

            TechTalk.SpecFlow.ScenarioInfo scenarioInfo =
                new TechTalk.SpecFlow.ScenarioInfo("Validate title after search contains query", null, @__tags);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("I have opened /", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Given ");
            testRunner.When(string.Format("I search {0}", query), ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "When ");
            testRunner.Then(string.Format("Browser title contains {0}", query), ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Then ");
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestCaseAttribute("Debug", "unickq", null, Category = "Debug",
            TestName = "ValidateSearchFieldIsSetAfterQuery with Debug and \"unickq\"")]
        [NUnit.Framework.TestCaseAttribute("DebugIpad", "unickq", null, Category = "DebugIpad",
            TestName = "ValidateSearchFieldIsSetAfterQuery with DebugIpad and \"unickq\"")]
        public virtual void ValidateSearchFieldIsSetAfterQuery(string browser, string query, string[] exampleTags)
        {
            string[] @__tags = new string[]
            {
                "Browser:Debug",
                "Browser:DebugIpad"
            };
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }

            TechTalk.SpecFlow.ScenarioInfo scenarioInfo =
                new TechTalk.SpecFlow.ScenarioInfo("Validate search field is set after query", null, @__tags);
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
            testRunner.Given("I have opened /", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Given ");
            testRunner.When(string.Format("I search {0}", query), ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "When ");
            testRunner.Then(string.Format("Search query should be equal to {0}", query), ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Then ");
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore

#endregion